// Mocks generated by Mockito 5.4.2 from annotations
// in cloudwalk_assessment/test/core/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i13;
import 'dart:typed_data' as _i14;

import 'package:cloudwalk_assessment/app/core/utilities/errors/failure.dart'
    as _i8;
import 'package:cloudwalk_assessment/app/data/datasources/datasource.dart'
    as _i4;
import 'package:cloudwalk_assessment/app/data/datasources/datasource_impl.dart'
    as _i12;
import 'package:cloudwalk_assessment/app/data/models/image_model.dart' as _i11;
import 'package:cloudwalk_assessment/app/data/repositories/repository_impl.dart'
    as _i10;
import 'package:cloudwalk_assessment/app/domain/entities/image_entity.dart'
    as _i9;
import 'package:cloudwalk_assessment/app/domain/repositories/repository.dart'
    as _i2;
import 'package:cloudwalk_assessment/app/domain/usecases/images_usecase.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepository_0 extends _i1.SmartFake implements _i2.Repository {
  _FakeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataSource_2 extends _i1.SmartFake implements _i4.DataSource {
  _FakeDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_3 extends _i1.SmartFake implements _i5.Client {
  _FakeClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NasaImagesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaImagesUsecase extends _i1.Mock implements _i6.NasaImagesUsecase {
  MockNasaImagesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.Repository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>>.value(
                _FakeEither_1<_i8.Failure, List<_i9.ImageEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>>);
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i2.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>> getImagesRepo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getImagesRepo,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>>.value(
                _FakeEither_1<_i8.Failure, List<_i9.ImageEntity>>(
          this,
          Invocation.method(
            #getImagesRepo,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>>);
}

/// A class which mocks [RepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryImpl extends _i1.Mock implements _i10.RepositoryImpl {
  MockRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DataSource get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _FakeDataSource_2(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as _i4.DataSource);
  @override
  _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>> getImagesRepo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getImagesRepo,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>>.value(
                _FakeEither_1<_i8.Failure, List<_i9.ImageEntity>>(
          this,
          Invocation.method(
            #getImagesRepo,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, List<_i9.ImageEntity>>>);
}

/// A class which mocks [DataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSource extends _i1.Mock implements _i4.DataSource {
  MockDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i11.ImageModel>> getImages() => (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
        ),
        returnValue:
            _i7.Future<List<_i11.ImageModel>>.value(<_i11.ImageModel>[]),
      ) as _i7.Future<List<_i11.ImageModel>>);
}

/// A class which mocks [DataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSourceImpl extends _i1.Mock implements _i12.DataSourceImpl {
  MockDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_3(
          this,
          Invocation.getter(#client),
        ),
      ) as _i5.Client);
  @override
  _i7.Future<List<_i11.ImageModel>> getImages() => (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
        ),
        returnValue:
            _i7.Future<List<_i11.ImageModel>>.value(<_i11.ImageModel>[]),
      ) as _i7.Future<List<_i11.ImageModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i5.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i13.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  _i7.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i7.Future<_i14.Uint8List>);
  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
