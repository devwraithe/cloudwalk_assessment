// Mocks generated by Mockito 5.4.2 from annotations
// in cloudwalk_assessment/test/app/core/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i17;
import 'dart:typed_data' as _i18;

import 'package:cloudwalk_assessment/app/core/utilities/errors/failure.dart'
    as _i12;
import 'package:cloudwalk_assessment/app/data/datasources/datasource.dart'
    as _i4;
import 'package:cloudwalk_assessment/app/data/datasources/remote_datasource.dart'
    as _i16;
import 'package:cloudwalk_assessment/app/data/models/image_model.dart' as _i15;
import 'package:cloudwalk_assessment/app/data/repositories/repository_impl.dart'
    as _i14;
import 'package:cloudwalk_assessment/app/domain/entities/image_entity.dart'
    as _i13;
import 'package:cloudwalk_assessment/app/domain/repositories/repository.dart'
    as _i2;
import 'package:cloudwalk_assessment/app/domain/usecases/images_usecase.dart'
    as _i10;
import 'package:cloudwalk_assessment/app/presentation/cubits/images_cubit.dart'
    as _i20;
import 'package:cloudwalk_assessment/app/presentation/cubits/nasa_images/images_states.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/foundation.dart' as _i9;
import 'package:flutter/services.dart' as _i8;
import 'package:flutter/src/widgets/framework.dart' as _i7;
import 'package:flutter/src/widgets/navigator.dart' as _i19;
import 'package:flutter/src/widgets/notification_listener.dart' as _i22;
import 'package:flutter_bloc/flutter_bloc.dart' as _i21;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepository_0 extends _i1.SmartFake implements _i2.Repository {
  _FakeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataSource_2 extends _i1.SmartFake implements _i4.DataSource {
  _FakeDataSource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_3 extends _i1.SmartFake implements _i5.Client {
  _FakeClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImagesStates_6 extends _i1.SmartFake implements _i6.ImagesStates {
  _FakeImagesStates_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_7 extends _i1.SmartFake implements _i7.Widget {
  _FakeWidget_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_8 extends _i1.SmartFake
    implements _i7.InheritedWidget {
  _FakeInheritedWidget_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_9 extends _i1.SmartFake
    implements _i9.DiagnosticsNode {
  _FakeDiagnosticsNode_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i9.TextTreeConfiguration? parentConfiguration,
    _i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [NasaImagesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaImagesUsecase extends _i1.Mock implements _i10.NasaImagesUsecase {
  MockNasaImagesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.Repository);
  @override
  _i11.Future<_i3.Either<_i12.Failure, List<_i13.ImageEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i11.Future<_i3.Either<_i12.Failure, List<_i13.ImageEntity>>>.value(
                _FakeEither_1<_i12.Failure, List<_i13.ImageEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i11.Future<_i3.Either<_i12.Failure, List<_i13.ImageEntity>>>);
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i2.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<
      _i3
          .Either<_i12.Failure, List<_i13.ImageEntity>>> getImagesRepo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getImagesRepo,
          [],
        ),
        returnValue:
            _i11.Future<_i3.Either<_i12.Failure, List<_i13.ImageEntity>>>.value(
                _FakeEither_1<_i12.Failure, List<_i13.ImageEntity>>(
          this,
          Invocation.method(
            #getImagesRepo,
            [],
          ),
        )),
      ) as _i11.Future<_i3.Either<_i12.Failure, List<_i13.ImageEntity>>>);
}

/// A class which mocks [RepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepositoryImpl extends _i1.Mock implements _i14.RepositoryImpl {
  MockRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DataSource get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _FakeDataSource_2(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as _i4.DataSource);
  @override
  _i11.Future<
      _i3
          .Either<_i12.Failure, List<_i13.ImageEntity>>> getImagesRepo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getImagesRepo,
          [],
        ),
        returnValue:
            _i11.Future<_i3.Either<_i12.Failure, List<_i13.ImageEntity>>>.value(
                _FakeEither_1<_i12.Failure, List<_i13.ImageEntity>>(
          this,
          Invocation.method(
            #getImagesRepo,
            [],
          ),
        )),
      ) as _i11.Future<_i3.Either<_i12.Failure, List<_i13.ImageEntity>>>);
}

/// A class which mocks [DataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSource extends _i1.Mock implements _i4.DataSource {
  MockDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<List<_i15.ImageModel>> getImages() => (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
        ),
        returnValue:
            _i11.Future<List<_i15.ImageModel>>.value(<_i15.ImageModel>[]),
      ) as _i11.Future<List<_i15.ImageModel>>);
}

/// A class which mocks [DataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSourceImpl extends _i1.Mock implements _i16.DataSourceImpl {
  MockDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_3(
          this,
          Invocation.getter(#client),
        ),
      ) as _i5.Client);
  @override
  _i11.Future<List<_i15.ImageModel>> getImages() => (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
        ),
        returnValue:
            _i11.Future<List<_i15.ImageModel>>.value(<_i15.ImageModel>[]),
      ) as _i11.Future<List<_i15.ImageModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i5.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i5.Response>);
  @override
  _i11.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i5.Response>);
  @override
  _i11.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i5.Response>);
  @override
  _i11.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i5.Response>);
  @override
  _i11.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i5.Response>);
  @override
  _i11.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i5.Response>.value(_FakeResponse_4(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i5.Response>);
  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(''),
      ) as _i11.Future<String>);
  @override
  _i11.Future<_i18.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i11.Future<_i18.Uint8List>);
  @override
  _i11.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_5(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i19.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
    _i19.Route<dynamic>? route,
    _i19.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i19.Route<dynamic>? route,
    _i19.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i19.Route<dynamic>? route,
    _i19.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i19.Route<dynamic>? newRoute,
    _i19.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i19.Route<dynamic>? route,
    _i19.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ImagesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagesCubit extends _i1.Mock implements _i20.ImagesCubit {
  MockImagesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.ImagesStates get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeImagesStates_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.ImagesStates);
  @override
  _i11.Stream<_i6.ImagesStates> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i11.Stream<_i6.ImagesStates>.empty(),
      ) as _i11.Stream<_i6.ImagesStates>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i11.Future<void> getImages() => (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
  @override
  void emit(_i6.ImagesStates? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i21.Change<_i6.ImagesStates>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i7.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_7(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i7.Widget);
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);
  @override
  _i7.InheritedWidget dependOnInheritedElement(
    _i7.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_8(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i7.InheritedWidget);
  @override
  void visitAncestorElements(_i7.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i7.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i22.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.DiagnosticsNode describeElement(
    String? name, {
    _i9.DiagnosticsTreeStyle? style = _i9.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i9.DiagnosticsNode);
  @override
  _i9.DiagnosticsNode describeWidget(
    String? name, {
    _i9.DiagnosticsTreeStyle? style = _i9.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i9.DiagnosticsNode);
  @override
  List<_i9.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i9.DiagnosticsNode>[],
      ) as List<_i9.DiagnosticsNode>);
  @override
  _i9.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_9(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i9.DiagnosticsNode);
}
